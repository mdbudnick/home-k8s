---
- name: Install and Configure kubectl
  hosts: localhost
  gather_facts: false
  vars:
    - kubectl_version: v1.27.7 # Match with kubespray/roles/kubespray-defaults/defaults/main.yaml kube_version
  tasks:
    - name: Determine OS and architecture
      ansible.builtin.set_fact:
        os: "{{ ansible_facts['os_family'] }}"
        architecture: "{{ ansible_facts['architecture'] }}"

    - name: Download and install kubectl for Linux
      become: true
      ansible.builtin.get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl"
        dest: "/usr/local/bin/"
        mode: "0411"
      when: os == "Debian" and architecture == "x86_64"

    - name: Download and install kubectl for macOS on Intel chip
      become: true
      ansible.builtin.get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/darwin/amd64/kubectl"
        dest: "/usr/local/bin/"
        mode: "0411"
      when: os == "Darwin" and architecture == "x86_64"

    - name: Download and install kubectl for macOS on Apple silicon
      become: true
      ansible.builtin.get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/darwin/arm64/kubectl"
        dest: "/usr/local/bin/"
        mode: "0411"
      when: os == "Darwin" and architecture == "arm64"

- name: Copy Kubernetes admin.conf
  hosts: localhost
  become: false
  vars:
    user: mb
    conf_file_dest: ~/.kube/home-k8s-cluster.conf
    context_name: home-k8s-cluster

  tasks:
    - name: Create ~/.kube directory
      file:
        path: ~/.kube
        state: directory

    - name: Check if ~/.kube/home-k8s-cluster.conf exists
      stat:
        path: ~/.kube/home-k8s-cluster.conf
      register: home_k8s_cluster_conf

    - name: Backup admin.conf on the local host
      copy:
        src: ~/.kube/home-k8s-cluster.conf
        dest: ~/.kube/home-k8s-cluster.conf.bak
        force: true
      register: backup_result
      when: home_k8s_cluster.stat.exists

    - name: Fail the playbook if the backup command fails
      fail:
        msg: "Failed to create a backup of home_k8s_cluster.conf on the local host"
      when:
        - home_k8s_cluster_conf.stat.exists and backup_result.changed

    - name: Get the IP address of kube_control_plane
      set_fact:
        kube_control_plane_ip: "{{ hostvars[groups['kube_control_plane'][0]].ansible_host }}"

    - name: Copy admin.conf from control_plane to local
      command: "scp {{ user }}@{{ kube_control_plane_ip }}:/tmp/admin.conf {{ conf_file_dest }}"
      register: scp_result

    - name: Set permissions on copied conf file
      file:
        path: "{{ conf_file_dest }}"
        mode: "0644"
      when: scp_result.changed

    - name: Replace IP in file
      replace:
        path: "{{ conf_file_dest }}"
        regexp: '127\.0\.0\.1'
        replace: "{{ kube_control_plane_ip }}"

    - name: Replace kubectl context in file
      blockinfile:
        path: "{{ conf_file_dest }}"
        marker: "{mark}"
        marker_begin: "contexts:"
        marker_end: "kind: Config"
        block: |
          - context:
            name: {{ context_name }}
              cluster: {{ context_name }}
              user: kubernetes-admin
              current-context: {{ context_name }}
              server: https://{{ kube_control_plane_ip }}:6443
        state: present
        backup: true

    - name: Print message for kubectl context
      debug:
        msg: >
          To use your new cluster, set your `kubectl` context {{ context_name }}
          to the one in your new config file at: {{ conf_file_dest }} with the
          command:\n\nkubectl config use-context {{ context_name }}
          --kubeconfig={{ conf_file_dest }}
